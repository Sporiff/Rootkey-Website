#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Sphinx on Netlify documentation build configuration file, created by
# sphinx-quickstart on Fri Sep  1 10:16:15 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
import sphinx_rtd_theme
import datetime
import os
import sys
from shutil import copyfile

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [

]

# Add ablog templates path


# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
year = datetime.datetime.now().year
project = 'Rootkey'
copyright = "{}, Ciarán Ainsworth".format(year)
author = 'Ciarán Ainsworth'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0.0'
# The full version, including alpha/beta/rc tags.
release = '1.0.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en-gb'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'RootkeyDoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Rootkey.tex', 'Rootkey Documentation',
     'Ciarán Ainsworth', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'rootkey', 'Rootkey Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Rootkey', 'Rootkey Documentation',
     author, 'rootkey', 'A static site of my thoughts.',
     'Miscellaneous'),
]

# -- Build legacy redirect files -------------------------------------------

# Define list of redirect files to be build in the Sphinx build process

redirect_files = [
    ('blog/2019-02-04-more-writing.html', '2019/2019-02-04-more-writing.html'),
    ('blog/2019-02-07-bring-back-my-internet.html', '2019/2019-02-07-bring-back-my-internet.html'),
    ('blog/2019-02-12-progress.html', '2019/2019-02-12-progress.html'),
    ('blog/2019-03-16-funkwhale-work.html', '2019/2019-03-16-funkwhale-work.html'),
    ('blog/2019-04-18-new-developments.html', '2019/2019-04-18-new-developments.html'),
    ('tech/2019-04-25-matrix-is-here.html', '2019/2019-04-25-matrix-is-here.html'),
    ('tech/2019-02-05-goodbye-guix.html', '2019/2019-02-05-goodbye-guix.html'),
    ('tech/2019-02-04-tanuki-tunes-update.html', '2019/2019-02-04-tanuki-tunes-update.html'),
    ('tech/2019-01-11-baku-social-news.html', '2019/2019-01-11-baku-social-news.html'),
    ('tech/2018-12-22-bakusocial.html', '2018/2018-12-22-bakusocial.html'),
    ('tech/2018-10-25-thermy.html', '2018/2018-10-25-thermy.html'),
    ('tech/2018-10-23-elementary-juno.html', '2018/2018-10-23-elementary-juno.html'),
    ('tech/2018-10-06-apple-drink-cider.html', '2018/2018-10-06-apple-drink-cider.html'),
    ('tech/2018-10-02-personal-matters.html', '2018/2018-10-02-personal-matters.html'),
    ('tech/2018-10-01-new-site.html', '2018/2018-10-01-new-site.html'),
    ('tech/2018-07-27-deploying-and-controlling-google-chrome-settings-using-microsoft-intune.html', '2018/2018-07-27-deploying-and-controlling-google-chrome-settings-using-microsoft-intune.html'),
    ('tech/2018-07-14-microsoft-teams-deployment-headaches.html', '2018/2018-07-14-microsoft-teams-deployment-headaches.html'),
    ('tech/2018-06-16-back-to-the-drawing-board.html', '2018/2018-06-16-back-to-the-drawing-board.html'),
    ('tech/2018-06-02-some-more-windows-work.html', '2018/2018-06-02-some-more-windows-work.html'),
    ('tech/2018-05-20-getting-on-with-gutenberg.html', '2018/2018-05-20-getting-on-with-gutenberg.html'),
    ('tech/2018-05-15-knit-and-perl.html', '2018/2018-05-15-knit-and-perl.html'),
    ('tech/2018-05-14-pgp-problems-promise-pounding-headaches.html', '2018/2018-05-14-pgp-problems-promise-pounding-headaches.html'),
    ('tech/2018-05-13-a-reluctant-return-to-windows.html', '2018/2018-05-13-a-reluctant-return-to-windows.html'),
    ('tech/2018-05-10-acclimatising-to-new-tech.html', '2018/2018-05-10-acclimatising-to-new-tech.html'),
    ('tech/2018-05-09-another-day-another-intel-fail.html', '2018/2018-05-09-another-day-another-intel-fail.html'),
    ('tech/2018-05-08-uncontrolled-devices-not-even-once.html', '2018/2018-05-08-uncontrolled-devices-not-even-once.html'),
    ('tech/2018-05-08-deploying-sophos-in-a-production-environment.html', '2018/2018-05-08-deploying-sophos-in-a-production-environment.html')
]

# Generate redirect template

redirect_template = """\
<html>
  <head>
    <meta http-equiv="refresh" content="1; url={new}" />
    <script>
      window.location.href = "{new}"
    </script>
  </head>
</html>
"""

# Tell Sphinx to copy the files

def copy_legacy_redirects(app, docname):
    if app.builder.name == 'html':
        for html_src_path, new in redirect_files:
            page = redirect_template.format(new=new)
            target_path = app.outdir + '/' + html_src_path
            if not os.path.exists(os.path.dirname(target_path)):
               os.makedirs(os.path.dirname(target_path))
            with open(target_path, 'w') as f:
               f.write(page)


def setup(app):
    app.connect('build-finished', copy_legacy_redirects)

html_extra_path = ['resume.html']
